// <auto-generated />
using System;
using FoodAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodAPI.Migrations
{
    [DbContext(typeof(FoodApiDBContext))]
    [Migration("20231002224810_Enums")]
    partial class Enums
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodAPI.Model.Address", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("a_id");

                    b.Property<int>("AddressNumber")
                        .HasColumnType("int")
                        .HasColumnName("a_address_number");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("a_cep");

                    b.Property<string>("Complement")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("a_complement");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("a_receiver_name");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("a_street");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("a_user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ADDRESS");
                });

            modelBuilder.Entity("FoodAPI.Model.Company", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cy_id");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("cy_cnpj");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("cy_description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("cy_email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("cy_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("cy_password");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cy_plan_id");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cy_type_id");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("TypeId");

                    b.HasIndex(new[] { "Email" }, "Index_Company");

                    b.ToTable("COMPANY");
                });

            modelBuilder.Entity("FoodAPI.Model.CompanyPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cp_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cp_name");

                    b.HasKey("Id");

                    b.ToTable("COMPANY_PLAN");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e91e480-098a-42e4-baf4-7e018cded677"),
                            Name = "Basic"
                        },
                        new
                        {
                            Id = new Guid("f236b759-d429-4f68-8c39-ec0c2ae339a5"),
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("FoodAPI.Model.CompanyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ct_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ct_name");

                    b.HasKey("Id");

                    b.ToTable("COMPANY_TYPE");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1680308-7124-4dc8-8535-73a0a541d9c4"),
                            Name = "Market"
                        },
                        new
                        {
                            Id = new Guid("a0134aab-9578-4c3c-8246-dc8ce93356e6"),
                            Name = "Restaurant"
                        });
                });

            modelBuilder.Entity("FoodAPI.Model.Coupon", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("c_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("c_code");

                    b.Property<Guid>("CompanyTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("c_company_type_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("c_description");

                    b.Property<Guid?>("MenuID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("c_menu_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("c_name");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("c_plan_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("c_value");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("c_value_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId")
                        .IsUnique();

                    b.HasIndex("MenuID");

                    b.HasIndex("PlanId");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex(new[] { "Code" }, "Index_Coupon");

                    b.ToTable("COUPON");
                });

            modelBuilder.Entity("FoodAPI.Model.CouponCompanyRel", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cc_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cc_company_id");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cc_coupon_id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("CouponId");

                    b.HasIndex(new[] { "CompanyId" }, "Index_CouponCompany");

                    b.ToTable("COUPON_COMPANY");
                });

            modelBuilder.Entity("FoodAPI.Model.CouponUserRel", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cu_id");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cu_coupon_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cu_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "Index_CouponUser");

                    b.ToTable("COUPON_USER");
                });

            modelBuilder.Entity("FoodAPI.Model.CouponValueType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cvt_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cvt_name");

                    b.HasKey("Id");

                    b.ToTable("COUPON_VALUE_TYPE");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2280e72c-ec3f-48ae-90e9-37962d696b31"),
                            Name = "Percetage"
                        },
                        new
                        {
                            Id = new Guid("27fc20a5-9317-456f-8597-22b6eb2a9fa8"),
                            Name = "Value"
                        });
                });

            modelBuilder.Entity("FoodAPI.Model.Deliverer", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("d_id");

                    b.Property<int>("AddressNumber")
                        .HasColumnType("int")
                        .HasColumnName("d_addressnumber");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2")
                        .HasColumnName("d_birthday");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("d_cep");

                    b.Property<string>("CNH")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("d_cnh");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("d_cpf");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("d_complement");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("d_email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("d_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("d_password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("d_phonenumber");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("d_status_id");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("d_street");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("d_vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("VehicleId");

                    b.HasIndex(new[] { "Email", "PhoneNumber" }, "Index_Deliverer");

                    b.ToTable("DELIVERER");
                });

            modelBuilder.Entity("FoodAPI.Model.DelivererMotorcicle", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("dm_id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("dm_brand");

                    b.Property<Guid>("DelivererId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("dm_deliverer_id");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("dm_model");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("dm_plate");

                    b.Property<string>("Renavam")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("dm_renavam");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("dm_year");

                    b.HasKey("Id");

                    b.HasIndex("DelivererId")
                        .IsUnique();

                    b.HasIndex(new[] { "DelivererId", "Renavam", "Plate" }, "Index_Motorcicle");

                    b.ToTable("DELIVERER_MOTORCICLE");
                });

            modelBuilder.Entity("FoodAPI.Model.DelivererStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ds_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ds_name");

                    b.HasKey("Id");

                    b.ToTable("DELIVERER_STATUS");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b11067d6-ed51-4f44-af40-9c2b1c470c0a"),
                            Name = "Offline"
                        },
                        new
                        {
                            Id = new Guid("4688c7bb-1976-45eb-a476-5ed956011b38"),
                            Name = "Online"
                        },
                        new
                        {
                            Id = new Guid("17fc6245-94fc-4f1d-9cbe-9b2fca9cd5f2"),
                            Name = "Work"
                        });
                });

            modelBuilder.Entity("FoodAPI.Model.DelivererVehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("dv_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dv_name");

                    b.HasKey("Id");

                    b.ToTable("DELIVERER_VEHICLE");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b5260e2-7241-4592-8622-1f595135d905"),
                            Name = "Bike"
                        },
                        new
                        {
                            Id = new Guid("dce05953-739c-4185-869f-ed03bf337d0a"),
                            Name = "Motorcicle"
                        });
                });

            modelBuilder.Entity("FoodAPI.Model.Item", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("oi_id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("oi_amount");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("oi_menu_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("oi_order_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("oi_value");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("ORDER_ITEM");
                });

            modelBuilder.Entity("FoodAPI.Model.Menu", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("m_id");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("m_categories");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("m_company_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("m_description");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("m_discount");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("m_image");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("m_is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("m_name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("m_price");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MENU");
                });

            modelBuilder.Entity("FoodAPI.Model.Order", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("o_id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("o_address_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("o_company_id");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("o_coupon_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("o_date");

                    b.Property<Guid>("DelivererId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("o_deliverer_id");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("o_status_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("o_user_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("o_value");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CouponId");

                    b.HasIndex("DelivererId");

                    b.HasIndex("StatusId");

                    b.HasIndex(new[] { "UserId" }, "Index_Order");

                    b.ToTable("ORDER");
                });

            modelBuilder.Entity("FoodAPI.Model.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("os_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("os_name");

                    b.HasKey("Id");

                    b.ToTable("ORDER_STATUS");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0190476-b869-44d0-997f-eca6a23a623e"),
                            Name = "Open"
                        },
                        new
                        {
                            Id = new Guid("faa9c90d-96b2-46dc-a8b0-add2e8a80a32"),
                            Name = "Closed"
                        },
                        new
                        {
                            Id = new Guid("f154a056-a2f0-498e-98c6-7dfc20af60eb"),
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("FoodAPI.Model.User", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("u_id");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2")
                        .HasColumnName("u_birthday");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("u_cpf");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("u_email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("u_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("u_password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("u_phonenumber");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("u_plan_id");

                    b.HasKey("Id");

                    b.HasIndex("PlanId")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber", "Email" }, "Index_User");

                    b.ToTable("USER");
                });

            modelBuilder.Entity("FoodAPI.Model.UserPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("up_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("up_name");

                    b.HasKey("Id");

                    b.ToTable("USER_PLAN");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4079c94f-06e4-4d0b-81eb-6fbd22f1ff66"),
                            Name = "None"
                        },
                        new
                        {
                            Id = new Guid("0b29113c-f0ae-442c-9dbf-89607be11815"),
                            Name = "Premium"
                        });
                });

            modelBuilder.Entity("FoodAPI.Model.Address", b =>
                {
                    b.HasOne("FoodAPI.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodAPI.Model.Company", b =>
                {
                    b.HasOne("FoodAPI.Model.CompanyPlan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.CompanyType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FoodAPI.Model.Coupon", b =>
                {
                    b.HasOne("FoodAPI.Model.CompanyType", "CompanyType")
                        .WithOne()
                        .HasForeignKey("FoodAPI.Model.Coupon", "CompanyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.UserPlan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.CouponValueType", "ValueType")
                        .WithMany()
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");

                    b.Navigation("Menu");

                    b.Navigation("Plan");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("FoodAPI.Model.CouponCompanyRel", b =>
                {
                    b.HasOne("FoodAPI.Model.Company", "Company")
                        .WithOne()
                        .HasForeignKey("FoodAPI.Model.CouponCompanyRel", "CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.Coupon", "Coupon")
                        .WithMany("CompanyRel")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("FoodAPI.Model.CouponUserRel", b =>
                {
                    b.HasOne("FoodAPI.Model.Coupon", "Coupon")
                        .WithMany("UserRel")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.User", "User")
                        .WithOne()
                        .HasForeignKey("FoodAPI.Model.CouponUserRel", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodAPI.Model.Deliverer", b =>
                {
                    b.HasOne("FoodAPI.Model.DelivererStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.DelivererVehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FoodAPI.Model.DelivererMotorcicle", b =>
                {
                    b.HasOne("FoodAPI.Model.Deliverer", "Deliverer")
                        .WithOne()
                        .HasForeignKey("FoodAPI.Model.DelivererMotorcicle", "DelivererId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Deliverer");
                });

            modelBuilder.Entity("FoodAPI.Model.Item", b =>
                {
                    b.HasOne("FoodAPI.Model.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.Order", "Order")
                        .WithMany("Itens")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodAPI.Model.Menu", b =>
                {
                    b.HasOne("FoodAPI.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("FoodAPI.Model.Order", b =>
                {
                    b.HasOne("FoodAPI.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.Deliverer", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodAPI.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("Coupon");

                    b.Navigation("Deliverer");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodAPI.Model.User", b =>
                {
                    b.HasOne("FoodAPI.Model.UserPlan", "Plan")
                        .WithOne()
                        .HasForeignKey("FoodAPI.Model.User", "PlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("FoodAPI.Model.Coupon", b =>
                {
                    b.Navigation("CompanyRel");

                    b.Navigation("UserRel");
                });

            modelBuilder.Entity("FoodAPI.Model.Order", b =>
                {
                    b.Navigation("Itens");
                });
#pragma warning restore 612, 618
        }
    }
}
